# 之字形打印链表

## 题目描述
请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。

## 解决方案

#### 方案一（两个栈）
    import java.util.Stack;
    import java.util.ArrayList;
    /*
    public class TreeNode {
        int val = 0;
        TreeNode left = null;
        TreeNode right = null;

        public TreeNode(int val) {
            this.val = val;

        }

    }
    */
    public class Solution {
        public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
            ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
            if(pRoot == null) return result;
            Stack<TreeNode> stack1 = new Stack<TreeNode>();
            Stack<TreeNode> stack2 = new Stack<TreeNode>();
            stack1.push(pRoot);
            while(!stack1.isEmpty() || !stack2.isEmpty()){
                if(!stack1.isEmpty()){
                    ArrayList<Integer> tempArray = new ArrayList<Integer>();
                    while(!stack1.isEmpty()){
                        TreeNode temp = stack1.pop();
                        tempArray.add(temp.val);
                        if(temp.left != null) stack2.push(temp.left);
                        if(temp.right != null) stack2.push(temp.right);
                    }
                    result.add(tempArray);
                }
                if(!stack2.isEmpty()){
                    ArrayList<Integer> tempArray = new ArrayList<Integer>();
                    while(!stack2.isEmpty()){
                        TreeNode temp = stack2.pop();
                        tempArray.add(temp.val);
                        if(temp.right != null) stack1.push(temp.right);
                        if(temp.left != null) stack1.push(temp.left);
                    }
                    result.add(tempArray);
                }
            }
            return result;
        }

    }
    
#### 方案二（双向队列）
    import java.util.List;
    import java.util.LinkedList;
    import java.util.ArrayList;
    import java.util.Queue;
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     *     int val;
     *     TreeNode left;
     *     TreeNode right;
     *     TreeNode(int x) { val = x; }
     * }
     */
    class Solution {
        public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
            List<List<Integer>> result = new ArrayList<List<Integer>>();
            if(root==null) return result;
            Queue<TreeNode> queue = new LinkedList<TreeNode>(); 
            queue.add(root);
            boolean direction=true;
            while(!queue.isEmpty()){
                List<Integer> list = new ArrayList<Integer>();
                int count = queue.size();
                while(count>0){
                    TreeNode node = queue.poll();
                    if(direction) list.add(node.val);
                    else list.add(0,node.val);
                    if(node.left!=null) queue.add(node.left);
                    if(node.right!=null) queue.add(node.right);
                    count--;
                }
                result.add(list);
                direction = !direction;
            }
            return result;
        }
    }
