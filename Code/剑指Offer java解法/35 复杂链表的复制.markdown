# 复杂链表的复制

## 题目描述
输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）。

## 解法1（哈希表）
    import java.util.HashMap;
    /*
    public class RandomListNode {
        int label;
        RandomListNode next = null;
        RandomListNode random = null;

        RandomListNode(int label) {
            this.label = label;
        }
    }
    */
    public class Solution {
        public RandomListNode Clone(RandomListNode pHead)
        {
            if(pHead == null){return null;}
            HashMap<RandomListNode,RandomListNode> map = new HashMap<RandomListNode,RandomListNode>();
            RandomListNode head = Copy(pHead,map);
            CopyRand(pHead,map);
            return head;
        }
        public RandomListNode Copy(RandomListNode pHead,HashMap<RandomListNode,RandomListNode> map){
            RandomListNode head = new RandomListNode(pHead.label);
            //RandomListNode pre = head;
            RandomListNode pre = new RandomListNode(pHead.label);
            pre.next = head;
            map.put(pHead,head);
            pHead = pHead.next;
            while(pHead != null){
                RandomListNode temp = new RandomListNode(pHead.label);
                /*pre.next = temp;
                pre = temp;*/
                head.next = temp;
                head = temp;
                map.put(pHead,temp);
                pHead = pHead.next;
            }
            //return head;
            return pre.next;
        }
        public void CopyRand(RandomListNode pHead,HashMap<RandomListNode,RandomListNode> map){
            while(pHead != null){
                RandomListNode temp = pHead.random;
                if(temp != null){
                    RandomListNode it = map.get(pHead);
                    it.random = map.get(pHead.random);
                    map.put(pHead,it);
                }
                pHead = pHead.next;
            }
        }
    }
    
## 解法2（在原链表上复制再拆分）
    import java.util.HashMap;
    /*
    public class RandomListNode {
        int label;
        RandomListNode next = null;
        RandomListNode random = null;

        RandomListNode(int label) {
            this.label = label;
        }
    }
    */
    public class Solution {
        public RandomListNode Clone(RandomListNode pHead)
        {
            if(pHead == null) return null;
            Copy(pHead);
            return Split(pHead);
        }
        public void Copy(RandomListNode Head){
            RandomListNode head = Head;
            while(head!=null){
                RandomListNode temp = new RandomListNode(head.label);
                temp.next = head.next;
                head.next = temp;
                head = temp.next;
            }
            while(Head!=null){
                if(Head.random!=null) Head.next.random = Head.random.next; //这里不容易注意到，random为null的话，就不会有random。next了
                Head = Head.next.next;
            }
        }
        public RandomListNode Split(RandomListNode head){
            RandomListNode Head = head.next;
            RandomListNode newhead = head.next;
            while(newhead != null){
                head.next = newhead.next;
                if(newhead.next!=null) newhead.next = newhead.next.next;
                head = head.next;
                newhead = newhead.next;
            }
            return Head;
        }
    }
