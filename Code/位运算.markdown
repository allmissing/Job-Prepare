# 位运算系列

## 78.子集
### 题目描述
给定一组不含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）。  

示例：  
    输入: nums = [1,2,3]  
    输出:  
    [  
      [3],  
      [1],  
      [2],  
      [1,2,3],  
      [1,3],  
      [2,3],  
      [1,2],  
      []  
    ]  
    
### 解法（https://www.cnblogs.com/yanhowever/p/10713548.html）
    class Solution {
        public List<List<Integer>> subsets(int[] nums) {
            //int len = nums.length;
            int end = (int)Math.pow(2,nums.length);
            List<List<Integer>> res = new ArrayList<>();
            for(int i = 0; i < end; i++)
            {
                res.add(subset(nums,i));
            }
            return res;
        }

        public List<Integer> subset(int[] nums, int m)
        {
            List<Integer> res = new ArrayList<>();
            int i = 0;
            while(m != 0)
            {
                if(m % 2 != 0)
                {
                    res.add(nums[i]);
                }
                m = m / 2;
                i++;
            }
            return res;
        }
    }

### 结题思路
从0遍历到2的nums.length次幂的二进制中1的位置正好和所有子集对应的下标索引对应

