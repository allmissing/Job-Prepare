# 5047.多边形三角剖分的最低得分
### 题目描述
给定 N，想象一个凸 N 边多边形，其顶点按顺时针顺序依次标记为 A[0], A[i], ..., A[N-1]。  

假设您将多边形剖分为 N-2 个三角形。对于每个三角形，该三角形的值是顶点标记的乘积，三角剖分的分数是进行三角剖分后所有 N-2 个三角形的值之和。  

返回多边形进行三角剖分后可以得到的最低分。  

示例1：  
    输入：[1,2,3]  
    输出：6  
    解释：多边形已经三角化，唯一三角形的分数为 6。  

示例2：  
    输入：[3,7,4,5]  
    输出：144  
    解释：有两种三角剖分，可能得分分别为：3*7*5 + 4*5*7 = 245，或 3*4*5 + 3*4*7 = 144。最低分数为 144。  

示例3：  
    输入：[1,3,1,4,1,5]  
    输出：13  
    解释：最低分数三角剖分的得分情况为 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13。  
    
### python解法（135周赛第4名	MinorSpirit 的解法）
    class Solution:
        def minScoreTriangulation(self, A: List[int]) -> int:
            n = len(A)
            dp = [[0 for j in range(n)] for i in range(n)]
            for step in range(2, n):
                for i in range(n):
                    j = (i + step) % n
                    dp[i][j] = None
                    for p in range(i + 1, i + step):
                        k = p % n
                        tmp = dp[i][k] + dp[k][j] + A[i] * A[j] * A[k]
                        if (dp[i][j] is None) or (tmp < dp[i][j]):
                            dp[i][j] = tmp
            ans = None
            for i in range(n):
                j = (i + n - 1) % n
                if (ans is None) or (dp[i][j] < ans):
                    ans = dp[i][j]
            return ans
        
##### 解法分析：
1.三角形，三个顶点，所以涉及到三个指针i,j,k：    
    （1）第一个定点i从数组的第一个元素开始遍历就行；  
    （2）从子问题划分图中可以看出，因为第i次循环从第i点开始，因此0-i点属于未划分区域，在循环的时候第三个顶点j应该是可以遍历到0-i的，所以通过定义步长step并取模余的方式来获得j；  
    （3）第二个几点k从i至j之间遍历即可。  
2.子问题的划分：  

    
